{"ast":null,"code":"var _jsxFileName = \"C:\\\\Digikull\\\\Assignments\\\\todolist-redux\\\\src\\\\component\\\\logIn.js\";\n// form for capturing the login credentials\nimport React from 'react';\nimport { useForm } from 'react-hook-form'; // for using form validation\n\nimport { connect } from 'react-redux'; // for connecting to redux store\n// functional components for using hooks \n\nfunction LogIn(props) {\n  // for handling form submits\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = data => {\n    // for inserting user data into userData array\n    props.verify(data); // for redirect the page to todolist\n\n    props.history.push('/AddToDoList');\n    console.log(data);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"LoginContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Loginhead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, \"My To Do List\", /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispLogindata\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"User name:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"userName\",\n    placeholder: \"User Name\",\n    ref: register({\n      required: {\n        value: true,\n        message: 'User Name is required'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispLoginblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, errors.userName && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 47\n    }\n  }, errors.userName.message)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispLogindata\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, \"Password:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"pass\",\n    placeholder: \"Password\",\n    ref: register({\n      required: {\n        value: true,\n        message: 'Password is required'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispLoginblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, errors.pass && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 43\n    }\n  }, errors.pass.message)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Submit\"))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tdArray: state.toDoArray,\n    userData: state.userData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    verify: val => dispatch({\n      type: 'LOGIN',\n      payload: val\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);","map":{"version":3,"sources":["C:/Digikull/Assignments/todolist-redux/src/component/logIn.js"],"names":["React","useForm","connect","LogIn","props","register","errors","handleSubmit","onSubmit","data","verify","history","push","console","log","required","value","message","userName","pass","mapStateToProps","state","tdArray","toDoArray","userData","mapDispatchToProps","dispatch","val","type","payload"],"mappings":"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","sourcesContent":["// form for capturing the login credentials\r\nimport React from 'react'\r\nimport {useForm} from  'react-hook-form' // for using form validation\r\nimport {connect} from 'react-redux' // for connecting to redux store\r\n\r\n// functional components for using hooks \r\nfunction LogIn(props) {\r\n    // for handling form submits\r\n    const {register,errors,handleSubmit} = useForm() \r\n\r\n    const onSubmit = data => {\r\n        // for inserting user data into userData array\r\n        props.verify(data)\r\n        // for redirect the page to todolist\r\n        props.history.push('/AddToDoList')\r\n        console.log(data);\r\n    }\r\n\r\n    return(\r\n        <div className='LoginContainer'>\r\n            <div className='Loginhead'>\r\n                <form onSubmit={handleSubmit(onSubmit) }>\r\n                    My To Do List \r\n                    <p className='dispLogindata'>\r\n                        User name:\r\n                        <input type='text' name='userName' placeholder='User Name'\r\n                        ref={register({required: {value: true, message: 'User Name is required' }})}/> \r\n                    </p>\r\n                    <p className='dispLoginblank'>\r\n                        {errors.userName && ( <span>{errors.userName.message}</span> )}\r\n                    </p>\r\n                    \r\n                    <p className='dispLogindata'>\r\n                        Password: \r\n                        <input type='password' name='pass' placeholder='Password'\r\n                        ref={register({required: {value: true, message: 'Password is required' }})} \r\n                        />\r\n                    </p>\r\n                    <p className='dispLoginblank'>\r\n                        {errors.pass && ( <span>{errors.pass.message}</span> )}\r\n                    </p>\r\n                        \r\n                    <button type='Submit'>Submit</button>\r\n                                           \r\n\r\n                </form>\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tdArray: state.toDoArray,\r\n        userData: state.userData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        verify: (val) => dispatch({ type: 'LOGIN', payload: val })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn)\r\n"]},"metadata":{},"sourceType":"module"}