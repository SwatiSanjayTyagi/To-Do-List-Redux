{"ast":null,"code":"var _jsxFileName = \"C:\\\\Digikull\\\\Assignments\\\\todolist-redux\\\\src\\\\component\\\\AddToDoList.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; // to be able to connect to store\n\nfunction AddToDoList(props) {\n  const [inputItem, setInputItem] = useState({\n    task: '',\n    subtask: '',\n    desc: '',\n    dt: '',\n    tstatus: ''\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, \"Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.task,\n    placeholder: \"Task\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        task: event.target.value\n      });\n    },\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, \"Sub Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.subtask,\n    placeholder: \"SubTask\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        subtask: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptextarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: inputItem.desc,\n    rows: \"5\",\n    cols: \"70\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        desc: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: inputItem.dt,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        dt: event.target.value,\n        arrcheck: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  })), console.log(inputItem), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispbutton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Add Task\",\n    onClick: () => {\n      props.addMyList([inputItem]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"    \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 38\n    }\n  }, \"To Do List\"), \" \"), console.log(props.tdArray), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }\n  }, props.tdArray.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \" key=\", index, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: index,\n    name: index,\n    checked: item.arrcheck,\n    onClick: () => {\n      this.props.updateMe(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }), `${item.task} ${item.subtask} ${item.desc} \n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\n                        ${item.tstatus}`)))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tdArray: state.toDoArray\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMyList: val => dispatch({\n      type: 'ADD_ITEM',\n      payload: val\n    }),\n    updateMyList: val => dispatch({\n      type: 'UPDATE_ITEM',\n      payload: val\n    }),\n    deleteMyList: val => dispatch({\n      type: 'DELETE_ITEM',\n      payload: val\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDoList);","map":{"version":3,"sources":["C:/Digikull/Assignments/todolist-redux/src/component/AddToDoList.js"],"names":["React","useState","connect","AddToDoList","props","inputItem","setInputItem","task","subtask","desc","dt","tstatus","event","target","value","arrcheck","console","log","addMyList","tdArray","map","item","index","updateMe","Date","toLocaleDateString","mapStateToProps","state","toDoArray","mapDispatchToProps","dispatch","val","type","payload","updateMyList","deleteMyList"],"mappings":"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","sourcesContent":["import React , { useState } from 'react'\r\nimport { connect } from 'react-redux' // to be able to connect to store\r\n\r\nfunction AddToDoList (props) {\r\n    const [inputItem , setInputItem] = useState({task:'',\r\n                                                 subtask:'',\r\n                                                 desc:'',\r\n                                                 dt:'', \r\n                                                 tstatus:''\r\n                                                })\r\n    \r\n    return(\r\n        <>\r\n            <div className='disptask'>\r\n                <strong>Task</strong>\r\n                <input type='text' value={inputItem.task} placeholder='Task'\r\n                onChange={(event)=>{setInputItem({...inputItem,task: event.target.value})}} autoFocus/>\r\n                <strong>Sub Task</strong>\r\n                <input type = 'text' value = {inputItem.subtask} placeholder ='SubTask'\r\n                onChange={(event)=>{setInputItem({...inputItem,subtask: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='disptextarea'>\r\n                <strong>Description</strong>\r\n                <textarea  value = {inputItem.desc} rows=\"5\" cols=\"70\" \r\n                onChange={(event)=>{setInputItem({...inputItem,desc: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='disptask' > \r\n                <strong>Date</strong>\r\n                <input type = 'date' value = {inputItem.dt} \r\n                onChange={(event)=>{setInputItem({...inputItem,dt: event.target.value,arrcheck: false})}}/>\r\n            </div>\r\n            \r\n            {console.log(inputItem)}\r\n            <p className='dispbutton'>\r\n                <input type = 'button'  value =\"Add Task\" \r\n                onClick={()=>{props.addMyList([inputItem])}} />\r\n            </p>\r\n            <div className='App'>    <strong>To Do List</strong> </div>\r\n                {console.log(props.tdArray)}\r\n               <ul>\r\n                {props.tdArray.map((item, index) => (\r\n                    <li> key={index}<strong>\r\n                        <input type=\"checkbox\" id={index} name={index} \r\n                        checked={item.arrcheck} onClick = {()=>{this.props.updateMe(index)}} />\r\n                        {`${item.task} ${item.subtask} ${item.desc} \r\n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\r\n                        ${item.tstatus}`}\r\n                        </strong>\r\n                    </li>\r\n                        ))}\r\n                </ul>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        tdArray: state.toDoArray\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        addMyList: (val) => dispatch({type:'ADD_ITEM' , payload: val}) ,\r\n        updateMyList: (val) => dispatch({type:'UPDATE_ITEM' , payload: val}) ,\r\n        deleteMyList: (val) => dispatch({type:'DELETE_ITEM' , payload: val})\r\n        }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddToDoList)\r\n"]},"metadata":{},"sourceType":"module"}