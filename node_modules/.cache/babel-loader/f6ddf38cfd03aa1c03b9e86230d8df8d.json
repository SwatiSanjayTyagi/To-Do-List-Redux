{"ast":null,"code":"var _jsxFileName = \"C:\\\\Digikull\\\\Assignments\\\\todolist-redux\\\\src\\\\component\\\\AddToDoList.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'; // to be able to connect to store\n\nimport { useForm } from 'react-hook-form';\n\nfunction AddToDoList(props) {\n  const [inputItem, setInputItem] = useState({\n    task: '',\n    subtask: '',\n    desc: '',\n    dt: '',\n    arrcheck: '',\n    tstatus: ''\n  });\n  const [updateIndex, setUpdateIndex] = useState(-1);\n  useEffect(() => {\n    if (!props.isAuth) {\n      props.history.push('/logIn');\n    }\n  }, []);\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = submit => {\n    console.log(submit, 'submit check');\n\n    if (updateIndex == -1) {\n      props.addMyList([submit]);\n    } else {\n      props.updateMyList({\n        ind: updateIndex,\n        obj: submit\n      });\n      setUpdateIndex(-1);\n    }\n\n    handleclear();\n  }; //var [updateCheck, setUpdateCheck] = useState({arrcheck:'',tstatus:''})\n\n\n  var todaydt = new Date().toLocaleDateString('en-GB');\n\n  var Handleclick = ind => {\n    var arrClick = props.tdArray[ind];\n    var newStatus; // console.log(arrClick,'arrClick')\n\n    if (arrClick.tstatus == 'Complete' & arrClick.arrcheck == true) {\n      newStatus = 'Incomplete';\n    } else {\n      newStatus = 'Complete';\n    }\n\n    var newObj = {\n      arrcheck: !arrClick.arrcheck,\n      tstatus: newStatus\n    }; //console.log(newObj,ind,'inside HandleClick')\n\n    props.updateMyItem({\n      ind: ind,\n      obj: newObj\n    });\n  };\n\n  var handleclear = () => {\n    console.log('handle clear');\n    setInputItem({\n      task: '',\n      subtask: '',\n      desc: '',\n      dt: '',\n      arrcheck: '',\n      tstatus: ''\n    });\n  };\n\n  var HandleAdd = inputPara => {\n    //  console.log('handle add and clear')\n    if (updateIndex == -1) {\n      props.addMyList([inputPara]);\n    } else {\n      props.updateMyList({\n        ind: updateIndex,\n        obj: inputPara\n      });\n      setUpdateIndex(-1);\n    }\n\n    handleclear();\n  };\n\n  var HandleUpdate = ind => {\n    var findItem = props.tdArray[ind];\n    setInputItem({\n      task: findItem.task,\n      subtask: findItem.subtask,\n      desc: findItem.desc,\n      dt: findItem.dt,\n      arrcheck: findItem.arrcheck,\n      tstatus: findItem.tstatus\n    });\n    setUpdateIndex(ind);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.task,\n    name: \"task\",\n    placeholder: \"Task\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        task: event.target.value\n      });\n    },\n    ref: register({\n      required: {\n        value: true,\n        message: 'Task is required'\n      }\n    }),\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Sub Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.subtask,\n    name: \"subtask\",\n    placeholder: \"SubTask\",\n    ref: register,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        subtask: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  })), errors.task && /*#__PURE__*/React.createElement(\"span\", {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, errors.task.message.trim()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptextarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"desc\",\n    value: inputItem.desc,\n    rows: \"5\",\n    cols: \"70\",\n    placeholder: \"Description\",\n    ref: register,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        desc: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dispdate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    name: \"dt\",\n    value: inputItem.dt,\n    ref: register,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        dt: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Status\"), updateIndex == -1 ? /*#__PURE__*/React.createElement(\"select\", {\n    name: \"tstatus\",\n    value: inputItem.tstatus,\n    ref: register,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        tstatus: event.target.value,\n        arrcheck: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, \"Choose...\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Incomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, \"Incomplete\")) : /*#__PURE__*/React.createElement(\"select\", {\n    value: inputItem.tstatus,\n    name: \"tstatus\",\n    ref: register,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        tstatus: event.target.value,\n        arrcheck: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Choose...\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Incomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, \"Incomplete\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 20\n    }\n  }, \"Completed\"))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispbutton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: updateIndex == -1 ? \"Add Task\" : \"Update Task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }\n  }, props.tdArray.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: index,\n    name: index,\n    checked: item.arrcheck,\n    onChange: () => {\n      Handleclick(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: item.arrcheck ? 'truechk' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }, \" \", todaydt <= new Date(item.dt).toLocaleDateString('en-GB') ? '' : /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 98\n    }\n  }, \" Task is overdue !!! \")), `${item.task} ${item.subtask} ${item.desc} \n                                ${new Date(item.dt).toLocaleDateString('en-GB')}\n                                ${item.tstatus}`), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Update\",\n    onClick: () => {\n      HandleUpdate(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Delete\",\n    onClick: () => {\n      props.deleteMyList(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }))))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tdArray: state.toDoArray,\n    userData: state.userData,\n    isAuth: state.userData.length > 0 ? true : false\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMyList: val => dispatch({\n      type: 'ADD_ITEM',\n      payload: val\n    }),\n    updateMyList: valu => dispatch({\n      type: 'UPDATE_ITEM',\n      payload: valu\n    }),\n    updateMyItem: val => dispatch({\n      type: 'UPDATE_SINGLE',\n      payload: val\n    }),\n    deleteMyList: value => dispatch({\n      type: 'DELETE_ITEM',\n      payload: value\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDoList);","map":{"version":3,"sources":["C:/Digikull/Assignments/todolist-redux/src/component/AddToDoList.js"],"names":["React","useState","useEffect","connect","useForm","AddToDoList","props","inputItem","setInputItem","task","subtask","desc","dt","arrcheck","tstatus","updateIndex","setUpdateIndex","isAuth","history","push","register","errors","handleSubmit","onSubmit","submit","console","log","addMyList","updateMyList","ind","obj","handleclear","todaydt","Date","toLocaleDateString","Handleclick","arrClick","tdArray","newStatus","newObj","updateMyItem","HandleAdd","inputPara","HandleUpdate","findItem","event","target","value","required","message","trim","map","item","index","deleteMyList","mapStateToProps","state","toDoArray","userData","length","mapDispatchToProps","dispatch","val","type","payload","valu"],"mappings":"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","sourcesContent":["import React , { useState , useEffect } from 'react'\r\nimport { connect } from 'react-redux' // to be able to connect to store\r\nimport {useForm} from  'react-hook-form'\r\n\r\nfunction AddToDoList (props) {\r\n    const [inputItem , setInputItem] = useState({task:'',\r\n                                                 subtask:'',\r\n                                                 desc:'',\r\n                                                 dt:'', \r\n                                                 arrcheck:'',\r\n                                                 tstatus:''\r\n                                                })\r\n\r\n    const [updateIndex, setUpdateIndex] = useState(-1)\r\n    \r\nuseEffect(() => {\r\n    if (!props.isAuth ) \r\n    {\r\n        props.history.push('/logIn')\r\n    }\r\n},[] )\r\n\r\n\r\n    const {register,errors,handleSubmit} = useForm()\r\n    \r\n    const onSubmit = submit => {\r\n        console.log(submit,'submit check')\r\n        if (updateIndex== -1 ) \r\n        {\r\n            props.addMyList([submit])\r\n        }\r\n        else \r\n        {\r\n            props.updateMyList({ind: updateIndex,obj:submit })\r\n            setUpdateIndex(-1)\r\n        }\r\n        handleclear()\r\n    }\r\n    //var [updateCheck, setUpdateCheck] = useState({arrcheck:'',tstatus:''})\r\n    \r\n    var todaydt = new Date().toLocaleDateString('en-GB')\r\n\r\n    var Handleclick=(ind)=>{\r\n        var arrClick = props.tdArray[ind]\r\n        var newStatus \r\n        // console.log(arrClick,'arrClick')\r\n            if (arrClick.tstatus=='Complete' & arrClick.arrcheck==true )\r\n                {newStatus='Incomplete'}\r\n            else\r\n                {newStatus='Complete'}\r\n            var newObj = {arrcheck:!arrClick.arrcheck,tstatus:newStatus}\r\n            \r\n            //console.log(newObj,ind,'inside HandleClick')\r\n            props.updateMyItem({ind: ind,obj: newObj })\r\n    }\r\n    \r\n    var handleclear=()=> {\r\n        console.log('handle clear')\r\n\r\n        setInputItem({task:'',\r\n            subtask:'',\r\n            desc:'',\r\n            dt:'', \r\n            arrcheck:'',\r\n            tstatus:''}) \r\n    }\r\n    var HandleAdd=(inputPara)=>{\r\n      //  console.log('handle add and clear')\r\n        if (updateIndex== -1 ) \r\n        {\r\n            props.addMyList([inputPara])\r\n        }\r\n        else \r\n        {\r\n            props.updateMyList({ind: updateIndex,obj:inputPara })\r\n            setUpdateIndex(-1)\r\n        }\r\n        handleclear()\r\n    }\r\n\r\n    var HandleUpdate= (ind) => {\r\n        var findItem = props.tdArray[ind]\r\n        setInputItem(\r\n            {task: findItem.task,\r\n            subtask: findItem.subtask,\r\n            desc: findItem.desc,\r\n            dt: findItem.dt, \r\n            arrcheck: findItem.arrcheck,\r\n            tstatus: findItem.tstatus\r\n           }\r\n        )\r\n        setUpdateIndex(ind)\r\n    }\r\n\r\n\r\n    return(\r\n    <div>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <div className='disptask'>\r\n                \r\n                <strong>Task</strong>\r\n                \r\n                <input type='text' value={inputItem.task} name=\"task\" placeholder='Task'\r\n                onChange={(event)=>{setInputItem({...inputItem,task: event.target.value})}} \r\n                ref={register({required: {value: true, message: 'Task is required' }})} autoFocus\r\n                /> \r\n                \r\n                <strong>Sub Task</strong>\r\n                <input type = 'text' value = {inputItem.subtask} name=\"subtask\" placeholder ='SubTask' \r\n                ref={register}\r\n                onChange={(event)=>{setInputItem({...inputItem,subtask: event.target.value})}}/>\r\n            </div>\r\n            {errors.task && (\r\n                    <span color='red'>{errors.task.message.trim()}</span>\r\n                )}  \r\n            <div className='disptextarea'>\r\n                <strong>Description</strong>\r\n                <textarea  name='desc' value = {inputItem.desc} rows=\"5\" cols=\"70\" \r\n                placeholder='Description' ref={register}\r\n                onChange={(event)=>{setInputItem({...inputItem,desc: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='dispdate' > \r\n                <strong>Date</strong>\r\n                <input type = 'date' name='dt' value = {inputItem.dt} ref={register}\r\n                onChange={(event)=>{setInputItem({...inputItem,dt: event.target.value})}}/>\r\n                <strong>Status</strong>\r\n                {updateIndex == -1 ?\r\n                <select name='tstatus' value = {inputItem.tstatus} ref={register}\r\n                onChange={(event)=>{setInputItem({...inputItem,tstatus: event.target.value,arrcheck: false })}}> \r\n                    <option value=''>Choose...</option>\r\n                    <option value='Incomplete'>Incomplete</option>\r\n                   \r\n                </select>:\r\n                <select value = {inputItem.tstatus}  name='tstatus' ref={register}\r\n                onChange={(event)=>{setInputItem({...inputItem,tstatus: event.target.value,arrcheck: false })}}> \r\n                    <option value=''>Choose...</option>\r\n                    <option value='Incomplete'>Incomplete</option>\r\n                   <option value='Complete'>Completed</option>\r\n                </select>}\r\n\r\n            </div>\r\n            {/* {updateIndex == -1 ? Handlearr(inputItem.tstatus) :'' } */}\r\n\r\n         \r\n            <p className='dispbutton'>\r\n                <input type = 'submit'  value ={updateIndex==-1 ? \"Add Task\" : \"Update Task\" } \r\n                      />\r\n                    \r\n            </p>\r\n            </form>\r\n         \r\n    \r\n               <ol>\r\n                {props.tdArray.map((item, index) => (\r\n                    <li  key={index} ><strong>\r\n                        <input type=\"checkbox\" id={index} name={index}\r\n                        checked={item.arrcheck} onChange = {()=>{Handleclick(index)}}/>\r\n                        <span className={item.arrcheck? 'truechk': '' } >\r\n                            \r\n                            <span> {todaydt <= new Date(item.dt).toLocaleDateString('en-GB')?'': <strong> Task is overdue !!! </strong> }</span>\r\n                                {`${item.task} ${item.subtask} ${item.desc} \r\n                                ${new Date(item.dt).toLocaleDateString('en-GB')}\r\n                                ${item.tstatus}`}\r\n                        </span>\r\n                        <input type=\"button\" value=\"Update\" \r\n                        onClick = {()=>{HandleUpdate(index)}} />\r\n                        <input type=\"button\" value=\"Delete\" \r\n                        onClick = {()=>{props.deleteMyList(index)}} />\r\n                      \r\n                        </strong>\r\n                    </li>\r\n                        ))}\r\n                </ol>\r\n            \r\n    </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        tdArray: state.toDoArray,\r\n        userData: state.userData,\r\n        isAuth : state.userData.length > 0 ? true: false\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        addMyList: (val) => dispatch({type:'ADD_ITEM' , payload: val}) ,\r\n        updateMyList: (valu) => dispatch({type:'UPDATE_ITEM' , payload: valu}) ,\r\n        updateMyItem: (val) => dispatch({type:'UPDATE_SINGLE' , payload:val}),\r\n        deleteMyList: (value) => dispatch({type:'DELETE_ITEM' , payload: value})\r\n        }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddToDoList)\r\n"]},"metadata":{},"sourceType":"module"}