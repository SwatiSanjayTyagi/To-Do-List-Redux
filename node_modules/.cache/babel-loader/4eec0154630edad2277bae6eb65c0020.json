{"ast":null,"code":"var _jsxFileName = \"C:\\\\Digikull\\\\Assignments\\\\todolist-redux\\\\src\\\\component\\\\AddToDoList.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; // to be able to connect to store\n\nfunction AddToDoList(props) {\n  const [inputItem, setInputItem] = useState({\n    task: '',\n    subtask: '',\n    desc: '',\n    dt: '',\n    arrcheck: '',\n    tstatus: ''\n  });\n  const [updateIndex, setUpdateIndex] = useState(-1);\n\n  var Handleclick = ind => {\n    if (inputItem.tstatus = 'Completed') {\n      return setInputItem({ ...inputItem,\n        arrcheck: true\n      });\n    } else {\n      return setInputItem({ ...inputItem,\n        arrcheck: false\n      });\n    }\n  };\n\n  var handleclear = () => {\n    console.log('handle clear');\n    setInputItem({\n      task: '',\n      subtask: '',\n      desc: '',\n      dt: '',\n      arrcheck: '',\n      tstatus: ''\n    });\n  };\n\n  var HandleAdd = inputPara => {\n    console.log('handle add and clear');\n\n    if (updateIndex == -1) {\n      props.addMyList([inputPara]);\n    } else {\n      props.updateMyList({\n        ind: updateIndex,\n        obj: inputPara\n      });\n      setUpdateIndex(-1);\n    }\n\n    handleclear();\n  };\n\n  var HandleUpdate = ind => {\n    var findItem = props.tdArray[ind];\n    setInputItem({\n      task: findItem.task,\n      subtask: findItem.subtask,\n      desc: findItem.desc,\n      dt: findItem.dt,\n      arrcheck: findItem.arrcheck,\n      tstatus: findItem.tstatus\n    });\n    setUpdateIndex(ind);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.task,\n    placeholder: \"Task\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        task: event.target.value\n      });\n    },\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Sub Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.subtask,\n    placeholder: \"SubTask\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        subtask: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptextarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: inputItem.desc,\n    rows: \"5\",\n    cols: \"70\",\n    placeholder: \"Description\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        desc: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dispdate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: inputItem.dt,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        dt: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: inputItem.tstatus,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        tstatus: event.target.value,\n        arrcheck: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, \"Choose...\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Completed \"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Incomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }\n  }, \"Incomplete\"))), console.log(inputItem), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispbutton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: updateIndex == -1 ? \"Add Task\" : \"Update Task\",\n    onClick: () => {\n      HandleAdd(inputItem);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  })), console.log(props.tdArray), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 16\n    }\n  }, props.tdArray.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: index,\n    name: index,\n    checked: item.arrcheck,\n    onChange: () => {\n      Handleclick(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }), `${item.task} ${item.subtask} ${item.desc} \n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\n                        ${item.tstatus}`, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Update\",\n    onClick: () => {\n      HandleUpdate(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Delete\",\n    onClick: () => {\n      props.deleteMyList(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }), console.log(index, 'is the index '), console.log(props.tdArray))))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tdArray: state.toDoArray\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMyList: val => dispatch({\n      type: 'ADD_ITEM',\n      payload: val\n    }),\n    updateMyList: valu => dispatch({\n      type: 'UPDATE_ITEM',\n      payload: valu\n    }),\n    deleteMyList: value => dispatch({\n      type: 'DELETE_ITEM',\n      payload: value\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDoList);","map":{"version":3,"sources":["C:/Digikull/Assignments/todolist-redux/src/component/AddToDoList.js"],"names":["React","useState","connect","AddToDoList","props","inputItem","setInputItem","task","subtask","desc","dt","arrcheck","tstatus","updateIndex","setUpdateIndex","Handleclick","ind","handleclear","console","log","HandleAdd","inputPara","addMyList","updateMyList","obj","HandleUpdate","findItem","tdArray","event","target","value","map","item","index","Date","toLocaleDateString","deleteMyList","mapStateToProps","state","toDoArray","mapDispatchToProps","dispatch","val","type","payload","valu"],"mappings":"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","sourcesContent":["import React , { useState } from 'react'\r\nimport { connect } from 'react-redux' // to be able to connect to store\r\n\r\nfunction AddToDoList (props) {\r\n    const [inputItem , setInputItem] = useState({task:'',\r\n                                                 subtask:'',\r\n                                                 desc:'',\r\n                                                 dt:'', \r\n                                                 arrcheck:'',\r\n                                                 tstatus:''\r\n                                                })\r\n\r\n    const [updateIndex, setUpdateIndex] = useState(-1)\r\n\r\n\r\n\r\n    var Handleclick=(ind)=>{\r\n        if (inputItem.tstatus='Completed')\r\n            {\r\n               return setInputItem({...inputItem,arrcheck:true})\r\n            }\r\n            else\r\n            {\r\n             \treturn setInputItem({...inputItem,arrcheck:false})\r\n            }\r\n\r\n    }\r\n\r\n    var handleclear=()=> {\r\n        console.log('handle clear')\r\n\r\n        setInputItem({task:'',\r\n        subtask:'',\r\n        desc:'',\r\n        dt:'', \r\n        arrcheck:'',\r\n        tstatus:''}) \r\n    }\r\n    var HandleAdd=(inputPara)=>{\r\n        console.log('handle add and clear')\r\n        if (updateIndex== -1 ) \r\n        {\r\n            props.addMyList([inputPara])\r\n        }\r\n        else \r\n        {\r\n            props.updateMyList({ind: updateIndex,obj:inputPara })\r\n            setUpdateIndex(-1)\r\n        }\r\n        handleclear()\r\n    }\r\n\r\n    var HandleUpdate= (ind) => {\r\n        var findItem = props.tdArray[ind]\r\n        setInputItem(\r\n            {task: findItem.task,\r\n            subtask: findItem.subtask,\r\n            desc: findItem.desc,\r\n            dt: findItem.dt, \r\n            arrcheck: findItem.arrcheck,\r\n            tstatus: findItem.tstatus\r\n           }\r\n        )\r\n        setUpdateIndex(ind)\r\n    }\r\n\r\n    \r\n    return(\r\n        <>\r\n            <div className='disptask'>\r\n                <strong>Task</strong>\r\n                <input type='text' value={inputItem.task} placeholder='Task'\r\n                onChange={(event)=>{setInputItem({...inputItem,task: event.target.value})}} autoFocus/>\r\n                <strong>Sub Task</strong>\r\n                <input type = 'text' value = {inputItem.subtask} placeholder ='SubTask'\r\n                onChange={(event)=>{setInputItem({...inputItem,subtask: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='disptextarea'>\r\n                <strong>Description</strong>\r\n                <textarea  value = {inputItem.desc} rows=\"5\" cols=\"70\" \r\n                placeholder='Description' \r\n                onChange={(event)=>{setInputItem({...inputItem,desc: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='dispdate' > \r\n                <strong>Date</strong>\r\n                <input type = 'date' value = {inputItem.dt} \r\n                onChange={(event)=>{setInputItem({...inputItem,dt: event.target.value})}}/>\r\n                <strong>Status</strong>\r\n                <select value = {inputItem.tstatus} \r\n                onChange={(event)=>{setInputItem({...inputItem,tstatus: event.target.value,arrcheck:false })}}> \r\n                    <option value=''>Choose...</option>\r\n                    <option value='Completed'>Completed\t</option>\r\n                   <option value='Incomplete'>Incomplete</option>\r\n                </select>\r\n\r\n            </div>\r\n            \r\n            {console.log(inputItem)}\r\n            <p className='dispbutton'>\r\n                <input type = 'button'  value ={updateIndex==-1 ? \"Add Task\" : \"Update Task\" } \r\n                      onClick={()=>{HandleAdd(inputItem)}} />\r\n                    \r\n            </p>\r\n            \r\n                {console.log(props.tdArray)}\r\n    \r\n               <ul>\r\n                {props.tdArray.map((item, index) => (\r\n                    <li  key={index} ><strong>\r\n                        <input type=\"checkbox\" id={index} name={index}\r\n                        checked={item.arrcheck} onChange = {()=>{Handleclick(index)}}/>\r\n                        {/* checked={item.tstatus=='Completed'? true: false} onChange = {()=>{}}/> */}\r\n                        {`${item.task} ${item.subtask} ${item.desc} \r\n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\r\n                        ${item.tstatus}`}\r\n                        <input type=\"button\" value=\"Update\" \r\n                        onClick = {()=>{HandleUpdate(index)}} />\r\n                        <input type=\"button\" value=\"Delete\" \r\n                        onClick = {()=>{props.deleteMyList(index)}} />\r\n                        {console.log(index,'is the index ')}\r\n                        {console.log(props.tdArray)}                       \r\n                        </strong>\r\n                    </li>\r\n                        ))}\r\n                </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        tdArray: state.toDoArray\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        addMyList: (val) => dispatch({type:'ADD_ITEM' , payload: val}) ,\r\n        updateMyList: (valu) => dispatch({type:'UPDATE_ITEM' , payload: valu}) ,\r\n        deleteMyList: (value) => dispatch({type:'DELETE_ITEM' , payload: value})\r\n        }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddToDoList)\r\n"]},"metadata":{},"sourceType":"module"}