{"ast":null,"code":"var _jsxFileName = \"C:\\\\Digikull\\\\Assignments\\\\todolist-redux\\\\src\\\\component\\\\AddToDoList.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; // to be able to connect to store\n\nfunction AddToDoList(props) {\n  const [inputItem, setInputItem] = useState({\n    task: '',\n    subtask: '',\n    desc: '',\n    dt: '',\n    arrcheck: '',\n    tstatus: ''\n  });\n\n  const Handleclear = () => {\n    console.log('inside Handle clear');\n    inputItem.task = '', inputItem.subtask = '', inputItem.desc = '', inputItem.dt = '', inputItem.tstatus = '';\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, \"Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.task,\n    placeholder: \"Task\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        task: event.target.value\n      });\n    },\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }, \"Sub Task\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputItem.subtask,\n    placeholder: \"SubTask\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        subtask: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disptextarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: inputItem.desc,\n    rows: \"5\",\n    cols: \"70\",\n    placeholder: \"Description\",\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        desc: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dispdate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: inputItem.dt,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        dt: event.target.value,\n        arrcheck: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: inputItem.tstatus,\n    onChange: event => {\n      setInputItem({ ...inputItem,\n        tstatus: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"Choose...\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"Completed \"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Work in progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Work in progress\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Incomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Incomplete\"))), console.log(inputItem), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"dispbutton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Add Task\" // onClick={()=>{HandleAdd([inputItem])}} />\n    ,\n    onClick: () => {\n      props.addMyList([inputItem]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"To Do List\")), console.log(props.tdArray), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }\n  }, props.tdArray.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: index,\n    name: index,\n    checked: item.arrcheck,\n    onClick: () => {\n      props.findMyItem(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }), `${item.task} ${item.subtask} ${item.desc} \n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\n                        ${item.tstatus}`, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Update\",\n    onClick: () => {\n      props.updateMyList(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Delete\",\n    onClick: () => {\n      props.deleteMyList(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }), console.log(index, 'is the index ')), Handleclear()))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tdArray: state.toDoArray\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMyList: val => dispatch({\n      type: 'ADD_ITEM',\n      payload: val\n    }),\n    findMyItem: val => dispatch({\n      type: 'FIND_ITEM',\n      payload: val\n    }),\n    updateMyList: val => dispatch({\n      type: 'UPDATE_ITEM',\n      payload: val\n    }),\n    deleteMyList: val => dispatch({\n      type: 'DELETE_ITEM',\n      payload: val\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDoList);","map":{"version":3,"sources":["C:/Digikull/Assignments/todolist-redux/src/component/AddToDoList.js"],"names":["React","useState","connect","AddToDoList","props","inputItem","setInputItem","task","subtask","desc","dt","arrcheck","tstatus","Handleclear","console","log","event","target","value","addMyList","tdArray","map","item","index","findMyItem","Date","toLocaleDateString","updateMyList","deleteMyList","mapStateToProps","state","toDoArray","mapDispatchToProps","dispatch","val","type","payload"],"mappings":"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","sourcesContent":["import React , { useState } from 'react'\r\nimport { connect } from 'react-redux' // to be able to connect to store\r\n\r\nfunction AddToDoList (props) {\r\n    const [inputItem , setInputItem] = useState({task:'',\r\n                                                 subtask:'',\r\n                                                 desc:'',\r\n                                                 dt:'', \r\n                                                 arrcheck:'',\r\n                                                 tstatus:''\r\n                                                })\r\n    const Handleclear = () => {\r\n        console.log('inside Handle clear')\r\n    \r\n        inputItem.task='', inputItem.subtask='' , inputItem.desc='',\r\n        inputItem.dt='', inputItem.tstatus=''\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <div className='disptask'>\r\n                <strong>Task</strong>\r\n                <input type='text' value={inputItem.task} placeholder='Task'\r\n                onChange={(event)=>{setInputItem({...inputItem,task: event.target.value})}} autoFocus/>\r\n                <strong>Sub Task</strong>\r\n                <input type = 'text' value = {inputItem.subtask} placeholder ='SubTask'\r\n                onChange={(event)=>{setInputItem({...inputItem,subtask: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='disptextarea'>\r\n                <strong>Description</strong>\r\n                <textarea  value = {inputItem.desc} rows=\"5\" cols=\"70\" \r\n                placeholder='Description' \r\n                onChange={(event)=>{setInputItem({...inputItem,desc: event.target.value})}}/>\r\n            </div>\r\n            \r\n            <div className='dispdate' > \r\n                <strong>Date</strong>\r\n                <input type = 'date' value = {inputItem.dt} \r\n                onChange={(event)=>{setInputItem({...inputItem,dt: event.target.value,arrcheck: false})}}/>\r\n                <strong>Status</strong>\r\n                <select value = {inputItem.tstatus} \r\n                onChange={(event)=>{setInputItem({...inputItem,tstatus: event.target.value})}}>\r\n                    <option value=''>Choose...</option>\r\n                    <option value='Completed'>Completed\t</option>\r\n                    <option value='Work in progress'>Work in progress</option>\r\n                    <option value='Incomplete'>Incomplete</option>\r\n                </select>\r\n            </div>\r\n            \r\n            {console.log(inputItem)}\r\n            <p className='dispbutton'>\r\n                <input type = 'button'  value =\"Add Task\" \r\n                    // onClick={()=>{HandleAdd([inputItem])}} />\r\n                    onClick={()=>{props.addMyList([inputItem])}}/>\r\n                \r\n                <strong>To Do List</strong>\r\n            </p>\r\n            \r\n                {console.log(props.tdArray)}\r\n               <ul>\r\n                {props.tdArray.map((item, index) => (\r\n                    <li  key={index} ><strong>\r\n                        <input type=\"checkbox\" id={index} name={index} \r\n                        checked={item.arrcheck} onClick = {()=>{props.findMyItem(index)}}/>\r\n                        {`${item.task} ${item.subtask} ${item.desc} \r\n                        ${new Date(item.dt).toLocaleDateString('en-GB')}\r\n                        ${item.tstatus}`}\r\n                        <input type=\"button\" value=\"Update\" \r\n                        onClick = {()=>{props.updateMyList(index)}} />\r\n                        <input type=\"button\" value=\"Delete\" \r\n                        onClick = {()=>{props.deleteMyList(index)}} />\r\n                        {console.log(index,'is the index ')}\r\n                        </strong>\r\n                        {Handleclear()}\r\n                    </li>\r\n                        ))}\r\n                </ul>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        tdArray: state.toDoArray\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) => {\r\n    return{\r\n        addMyList: (val) => dispatch({type:'ADD_ITEM' , payload: val}) ,\r\n        findMyItem: (val) => dispatch({type:'FIND_ITEM' , payload: val}) ,\r\n        updateMyList: (val) => dispatch({type:'UPDATE_ITEM' , payload: val}) ,\r\n        deleteMyList: (val) => dispatch({type:'DELETE_ITEM' , payload: val})\r\n        }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddToDoList)\r\n"]},"metadata":{},"sourceType":"module"}