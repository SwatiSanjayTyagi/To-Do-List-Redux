{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n          errors,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (resolver && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((isArray(value) ? value : [value]) as T[]).map(mapValueToBoolean).flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport filterBooleanArray from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n} from './types';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    formStateRef: {\n      current: { dirtyFields, touched },\n    },\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n    shouldUnregister,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !filterOutFalsy(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n      cleanup(shallowFieldsStateRef.current);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      const output = method(get(touched, name), args.argA, args.argB);\n      shouldSet && set(touched, name, output);\n      cleanup(touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(get(dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(dirtyFields, name, output);\n      cleanup(dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields,\n      isDirty,\n      touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...(isArray(get(dirtyFields, name))\n          ? get(dirtyFields, name)\n          : fillEmptyArray(allFields.current)),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    if (!shouldUnregister) {\n      shallowFieldsStateRef.current[name] = [value];\n    }\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(prependAt, {\n      argA: emptyArray,\n      argC: filterBooleanArray(value),\n    });\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: filterBooleanArray(value),\n      },\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","RegExp","validationData","isValueMessage","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","shouldUnregister","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","_b","resetFields","cleanup","batchStateUpdate","method","args","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","pop","shouldRenderUseWatch","watchField","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","filterBooleanArray","append","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","criteriaMode","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}