{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !data[value]) {\n          data = {\n            ...data,\n            [value]: [],\n          };\n        }\n      }\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n          errors,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (resolver && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    renderWatchedInputs,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((isArray(value) ? value : [value]) as T[]).map(mapValueToBoolean).flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport filterBooleanArray from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n} from './types';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    formStateRef: {\n      current: { dirtyFields, touched },\n    },\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n    shouldUnregister,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !filterOutFalsy(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n      cleanup(shallowFieldsStateRef.current);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      const output = method(get(touched, name), args.argA, args.argB);\n      shouldSet && set(touched, name, output);\n      cleanup(touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(get(dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(dirtyFields, name, output);\n      cleanup(dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields,\n      isDirty,\n      touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...(isArray(get(dirtyFields, name))\n          ? get(dirtyFields, name)\n          : fillEmptyArray(allFields.current)),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    if (!shouldUnregister) {\n      shallowFieldsStateRef.current[name] = [value];\n    }\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(prependAt, {\n      argA: emptyArray,\n      argC: filterBooleanArray(value),\n    });\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: filterBooleanArray(value),\n      },\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","_a","_c","__read","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","search","output","name_1","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","keys1_1","__values","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","_l","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","shouldUnregister","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","resetFields","cleanup","batchStateUpdate","method","args","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","pop","shouldRenderUseWatch","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","filterBooleanArray","append","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","isFormDirty","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","found","size","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}